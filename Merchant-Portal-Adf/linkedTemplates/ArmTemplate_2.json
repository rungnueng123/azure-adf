{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Merchant-Portal-Adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MPS_PP_MERCHANTFILE_OUTPUT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/MPS/TSBP1VNP"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "MPS_PP_MERCHANTFILE_TEMP.txt",
						"folderPath": {
							"value": "@concat(\n    'mps/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n\t'/output'\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MPS_PP_MERCHANTFILE_TEMP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/MPS/TSBP1VNP"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "MPS_PP_MERCHANTFILE_TEMP.txt",
						"folderPath": {
							"value": "@concat(\n    'mps/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n\t'/output'\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCB_ACTIVITY_LOG_OUTPUT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"year": {
						"type": "string",
						"defaultValue": "formatDateTime(subtractFromTime(utcnow(),1,'Year'),'yyyy')"
					},
					"month": {
						"type": "string",
						"defaultValue": "utcnow('MM')"
					},
					"date": {
						"type": "string",
						"defaultValue": "utcnow('dd')"
					}
				},
				"folder": {
					"name": "Log/SCB_ACTIVITY_LOG/OUTPUT"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(formatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'), 'dd'),'.log')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n    'scbstaff_activity_log/',\n    formatDateTime(subtractFromTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),1,'Year'),'yyyy'),\n    '/',\n    formatDateTime(subtractFromTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),1,'Year'),'MM')\n)",
							"type": "Expression"
						},
						"container": "log"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTPB2KBlobTemp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/SFTP/B2K"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd')\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": ",",
					"encodingName": "WINDOWS-874",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTPMPSBlobTemp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/SFTP/MPS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(\n    'mps/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd')\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": ",",
					"encodingName": "WINDOWS-874",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterTaskExpirePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Task Expire",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Update All Task Expire",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set PipelineStep 1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Update Task Expire",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineStep",
							"value": "EXPIRE_JOBS_FAILED"
						}
					},
					{
						"name": "Send Email Error",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set PipelineStep 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pipelineStep": {
									"value": "@variables('pipelineStep')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"pipelineStep": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SMC_Task_Expire"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP B2K to Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File EDCTERM SFTP To Blob Storage_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(\n\t'B2K_EDCTERM_',\n    formatDateTime(subtractFromTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),1,'Day'),'yyyyMMdd'),\n\t'.txt'\n)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false,
									"useBinaryTransfer": true,
									"disableChunking": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FTPB2KOnPrem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SFTPB2KBlobTemp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get File EMSMRMST SFTP To Blob Storage_copy1_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(\n\t'B2K_EMSMRMST_',\n    formatDateTime(subtractFromTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),1,'Day'),'yyyyMMdd'),\n\t'.txt'\n)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false,
									"useBinaryTransfer": true,
									"disableChunking": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FTPB2KOnPrem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SFTPB2KBlobTemp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get File MCRMRCH SFTP To Blob Storage_copy1_copy1_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(\n\t'B2K_MCRMRCH_',\n    formatDateTime(subtractFromTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),1,'Day'),'yyyyMMdd'),\n\t'.txt'\n)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false,
									"useBinaryTransfer": true,
									"disableChunking": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FTPB2KOnPrem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SFTPB2KBlobTemp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SMC_B2K"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-13T09:46:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SFTPB2KBlobTemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP MPS to Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PP_APINOTI SFTP To Blob Storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(\n\t'MPS_ODS_PP_APINOTI_D',\n    formatDateTime(subtractFromTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),1,'Day'),'yyyyMMdd'),\n\t'.DAT'\n)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false,
									"useBinaryTransfer": true,
									"disableChunking": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FTPMPSOnPrem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SFTPMPSBlobTemp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PP_DebitAdvice SFTP To Blob Storage_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(\n\t'MPS_PP_DebitAdvice_Info_D',\n    formatDateTime(subtractFromTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),1,'Day'),'yyyyMMdd'),\n\t'.txt'\n)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false,
									"useBinaryTransfer": true,
									"disableChunking": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FTPMPSOnPrem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SFTPMPSBlobTemp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PP_MerchantFile SFTP To Blob Storage_copy1_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FtpReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@concat(\n\t'PP_MerchantFile',\n\t'.txt'\n)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false,
									"useBinaryTransfer": true,
									"disableChunking": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FTPMPSOnPrem",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SFTPMPSBlobTemp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SMC_MPS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-13T09:46:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SFTPMPSBlobTemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Send Log Kafka')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": {
								"value": "piilog",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						},
						"linkedServiceName": {
							"referenceName": "AzureFunctionKafKa",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send Email Error",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set PipelineStep 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pipelineStep": {
									"value": "@variables('pipelineStep')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set PipelineStep 1",
						"description": "Error key message",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Azure Function1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineStep",
							"value": "PIILOG_DATA_FAILED"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"pipelineStep": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SMC_PIILog"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_FixLenghtProcessDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "B2KMPS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "B2K_MCRMRCH",
								"type": "DatasetReference"
							},
							"name": "mcrmrchFixedLength"
						},
						{
							"dataset": {
								"referenceName": "B2K_EDCTERM",
								"type": "DatasetReference"
							},
							"name": "edctermFixedLength"
						},
						{
							"dataset": {
								"referenceName": "B2K_EMSMRMST",
								"type": "DatasetReference"
							},
							"name": "emsmrmstFixedLength"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "B2K_MCRMRCH_OUTPUT",
								"type": "DatasetReference"
							},
							"name": "mcrmrchSink"
						},
						{
							"dataset": {
								"referenceName": "B2K_EDCTERM_OUTPUT",
								"type": "DatasetReference"
							},
							"name": "edctermSink"
						},
						{
							"dataset": {
								"referenceName": "B2K_EMSMRMST_OUTPUT",
								"type": "DatasetReference"
							},
							"name": "emsmrmstSink"
						}
					],
					"transformations": [
						{
							"name": "mcrmrchDerivedFixedLength"
						},
						{
							"name": "mcrmrchOutputFixedLength"
						},
						{
							"name": "edctermDerivedFixedLength"
						},
						{
							"name": "edctermOutputFixedLength"
						},
						{
							"name": "emsmrmstColumn1"
						},
						{
							"name": "emsmrmstOutputFixedLength"
						},
						{
							"name": "filterSequenceKey"
						},
						{
							"name": "filterSequence"
						}
					],
					"scriptLines": [
						"parameters{",
						"     UPDATE_DATE as string (toString(currentTimestamp()))",
						"}",
						"source(output(",
						"          data as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> mcrmrchFixedLength",
						"source(output(",
						"          data as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> edctermFixedLength",
						"source(output(",
						"          data as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emsmrmstFixedLength",
						"mcrmrchFixedLength derive(BILLER_MERCHANT_ID = trim(substring(data, 3, 16)),",
						"          ACCOUNT_ID = trim(substring(data, 310, 10)),",
						"          TAX_ID = trim(substring(data, 988, 13)),",
						"          NAME_TH = trim(substring(data, 1029, 40)),",
						"          NAME_EN = trim(substring(data, 23, 30)),",
						"          ACTIVE_STATUS = case(or(substring(data, 210, 1) == '2', substring(data, 210, 1) == '5'), 'A', 'I'),",
						"          UPDATE_DATE = $UPDATE_DATE,",
						"          SOURCE = \"B2K\") ~> mcrmrchDerivedFixedLength",
						"mcrmrchDerivedFixedLength select(mapColumn(",
						"          data,",
						"          BILLER_MERCHANT_ID,",
						"          ACCOUNT_ID,",
						"          TAX_ID,",
						"          NAME_TH,",
						"          NAME_EN,",
						"          ACTIVE_STATUS,",
						"          UPDATE_DATE,",
						"          SOURCE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> mcrmrchOutputFixedLength",
						"edctermFixedLength derive(MERCHANT_ID = trim(substring(data, 11, 16)),",
						"          Terminal_ID = trim(substring(data, 1, 8)),",
						"          Terminal_Name_EN = trim(substring(data, 30, 30)),",
						"          Terminal_Name_TH = trim(substring(data, 30, 30)),",
						"          UPDATE_DATE = $UPDATE_DATE,",
						"          ACTIVE_STATUS = 'A') ~> edctermDerivedFixedLength",
						"edctermDerivedFixedLength select(mapColumn(",
						"          data,",
						"          MERCHANT_ID,",
						"          Terminal_ID,",
						"          Terminal_Name_EN,",
						"          Terminal_Name_TH,",
						"          UPDATE_DATE,",
						"          ACTIVE_STATUS",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> edctermOutputFixedLength",
						"emsmrmstFixedLength derive(BILLER_MERCHANT_ID = trim(substring(data, 3, 16)),",
						"          EMAIL_1 = trim(substring(data, 24, 70)),",
						"          EMAIL_2 = trim(substring(data, 94, 70)),",
						"          EMAIL_3 = trim(substring(data, 164, 70))) ~> emsmrmstColumn1",
						"emsmrmstColumn1 select(mapColumn(",
						"          data,",
						"          BILLER_MERCHANT_ID,",
						"          EMAIL_1,",
						"          EMAIL_2,",
						"          EMAIL_3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> emsmrmstOutputFixedLength",
						"mcrmrchOutputFixedLength filter(BILLER_MERCHANT_ID != '' && ACCOUNT_ID != '' && TAX_ID != '' && NAME_TH != '' && NAME_EN != '') ~> filterSequenceKey",
						"edctermOutputFixedLength filter(MERCHANT_ID != '' && Terminal_ID != '' && Terminal_Name_EN != '' && Terminal_Name_TH != '') ~> filterSequence",
						"filterSequenceKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['B2K_MCRMRCH_TEMP.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          BILLER_MERCHANT_ID,",
						"          ACCOUNT_ID,",
						"          TAX_ID,",
						"          NAME_TH,",
						"          NAME_EN,",
						"          ACTIVE_STATUS,",
						"          UPDATE_DATE,",
						"          SOURCE",
						"     ),",
						"     partitionBy('hash', 1)) ~> mcrmrchSink",
						"filterSequence sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['B2K_EDCTERM_TEMP.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          MERCHANT_ID,",
						"          Terminal_ID,",
						"          Terminal_Name_EN,",
						"          Terminal_Name_TH,",
						"          UPDATE_DATE,",
						"          ACTIVE_STATUS",
						"     ),",
						"     partitionBy('hash', 1)) ~> edctermSink",
						"emsmrmstOutputFixedLength sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['B2K_EMSMRMST_TEMP.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          BILLER_MERCHANT_ID,",
						"          EMAIL_1,",
						"          EMAIL_2,",
						"          EMAIL_3",
						"     ),",
						"     partitionBy('hash', 1)) ~> emsmrmstSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MERCHANT_ACTIVITY_LOG_FLOW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Log"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "B2K_EDCTERM",
								"type": "DatasetReference"
							},
							"name": "queryMERCHANTACTIVITYLOG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MERCHANT_ACTIVITY_LOG_OUTPUT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     schemaName as string ('dbo'),",
						"     tableName as string ('MERCHANT_ACTIVITY_LOG'),",
						"     startDate as string ('2021-12-15 00:00:00.000'),",
						"     endDate as string ('2021-12-16 00:00:00.000'),",
						"     columnName as string ('TRANSACTION_DATE'),",
						"     fileName as string ('temp')",
						"}",
						"source(output(",
						"          ID as integer,",
						"          TRANSACTION_DATE as timestamp,",
						"          FUNCTION_CODE as string,",
						"          LOG as string,",
						"          LOG_TYPE as string,",
						"          APPLICATION_NAME as string,",
						"          EVENT as string,",
						"          EVENT_TYPE as string,",
						"          URL as string,",
						"          MERCHANT_CENTER_ID as string,",
						"          SOURCE_ADDRESS as string,",
						"          SOURCE_HOSTNAME as string,",
						"          SOURCE_USERNAME as string,",
						"          SOURCE_OBJECT as string,",
						"          DESTINATION_ADDRESS as string,",
						"          DESTINATION_HOSTNAME as string,",
						"          DESTINATION_USERNAME as string,",
						"          DESTINATION_OBJECT as string,",
						"          CHANGE_FROM as string,",
						"          CHANGE_TO as string,",
						"          SEARCH_CRITERIA as string,",
						"          RESULT_STATUS as string,",
						"          MESSAGE as string,",
						"          UPDATE_PII_LOG_STATUS as string,",
						"          UPDATE_PII_LOG_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> queryMERCHANTACTIVITYLOG",
						"queryMERCHANTACTIVITYLOG select(mapColumn(",
						"          TRANSACTION_DATE,",
						"          FUNCTION_CODE,",
						"          LOG,",
						"          LOG_TYPE,",
						"          APPLICATION_NAME,",
						"          EVENT,",
						"          EVENT_TYPE,",
						"          URL,",
						"          MERCHANT_CENTER_ID,",
						"          SOURCE_ADDRESS,",
						"          SOURCE_HOSTNAME,",
						"          SOURCE_USERNAME,",
						"          SOURCE_OBJECT,",
						"          DESTINATION_ADDRESS,",
						"          DESTINATION_HOSTNAME,",
						"          DESTINATION_USERNAME,",
						"          DESTINATION_OBJECT,",
						"          CHANGE_FROM,",
						"          CHANGE_TO,",
						"          SEARCH_CRITERIA,",
						"          RESULT_STATUS,",
						"          MESSAGE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['\"{$fileName}\" + \".log\"'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MPS_FixLenghtProcessDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "B2KMPS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MPS_PP_MERCHANTFILE",
								"type": "DatasetReference"
							},
							"name": "ppmerchantFixedLength"
						},
						{
							"dataset": {
								"referenceName": "MPS_ODSPP",
								"type": "DatasetReference"
							},
							"name": "ODSPP"
						},
						{
							"dataset": {
								"referenceName": "MPS_PP_DEBITADVICE",
								"type": "DatasetReference"
							},
							"name": "ppdebitadviceFixedLength"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MPS_PP_MERCHANTFILE_OUTPUT",
								"type": "DatasetReference"
							},
							"name": "ppmerchantSink"
						},
						{
							"dataset": {
								"referenceName": "MPS_PP_DEBITADVICE_OUTPUT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ppmerchantDerivedFixedLength"
						},
						{
							"name": "join1"
						},
						{
							"name": "ppmerchantOutputFixedLength"
						},
						{
							"name": "ppdebitadviceOutputFixedLength"
						},
						{
							"name": "filterODSPP"
						},
						{
							"name": "filterSequenceKey"
						},
						{
							"name": "filterType"
						}
					],
					"scriptLines": [
						"parameters{",
						"     UPDATE_DATE as string (toString(currentTimestamp()))",
						"}",
						"source(output(",
						"          data as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ppmerchantFixedLength",
						"source(output(",
						"          Id as string,",
						"          Biller_id as string,",
						"          Englishname as string,",
						"          Thainame as string,",
						"          REF3 as string,",
						"          Method_type as string,",
						"          Method_value as string,",
						"          MethodPrecedence as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ODSPP",
						"source(output(",
						"          {Biller ID} as string,",
						"          {Tax ID} as string,",
						"          {Biller Name - EN} as string,",
						"          {Biller Name - TH} as string,",
						"          {Biller Address (1) -TH} as string,",
						"          {Biller Address (2) -TH} as string,",
						"          {Biller Address (3) -TH} as string,",
						"          {Biller Address (4) -TH} as string,",
						"          {Zip code} as string,",
						"          {Biller E-Mail} as string,",
						"          {Report - PDF} as string,",
						"          {Report - Excel} as string,",
						"          {Report - CSV} as string,",
						"          {Branch ID} as string,",
						"          {Delivery Address } as string,",
						"          {Withholding Tax} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ppdebitadviceFixedLength",
						"ppmerchantFixedLength derive(BILLER_MERCHANT_ID = trim(substring(data, 1, 15)),",
						"          ACCOUNT_ID = trim(substring(data, 23, 10)),",
						"          TAX_ID = trim(substring(data, 1, 13)),",
						"          NAME_TH = trim(substring(data, 1445, 50)),",
						"          NAME_EN = trim(substring(data, 1395, 50)),",
						"          COMPANY_NAME_TH = trim(substring(data, 170, 50)),",
						"          COMPANY_NAME_EN = trim(substring(data, 57, 50)),",
						"          ACTIVE_STATUS = \"A\",",
						"          UPDATE_DATE = $UPDATE_DATE,",
						"          BUSINESS_TYPE = trim(substring(data, 107, 2)),",
						"          REF1_TH = trim(substring(data, 14837, 50)),",
						"          REF1_EN = trim(substring(data, 14787, 50)),",
						"          REF2_TH = trim(substring(data, 14937, 50)),",
						"          REF2_EN = trim(substring(data, 14887, 50)),",
						"          SOURCE = \"MPS\",",
						"          BILLER_TYPE = trim(substring(data,1526, 4)),",
						"          BANK_TYPE = trim(substring(data,1495, 4))) ~> ppmerchantDerivedFixedLength",
						"filterType, filterODSPP join(BILLER_MERCHANT_ID == Biller_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          data,",
						"          BILLER_MERCHANT_ID,",
						"          ACCOUNT_ID,",
						"          TAX_ID,",
						"          NAME_TH,",
						"          NAME_EN,",
						"          COMPANY_NAME_TH,",
						"          COMPANY_NAME_EN,",
						"          ACTIVE_STATUS,",
						"          UPDATE_DATE,",
						"          BUSINESS_TYPE,",
						"          REF1_TH,",
						"          REF1_EN,",
						"          REF2_TH,",
						"          REF2_EN,",
						"          SOURCE,",
						"          Id,",
						"          Biller_id,",
						"          Englishname,",
						"          Thainame,",
						"          REF3,",
						"          Method_type,",
						"          Method_value,",
						"          MethodPrecedence",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ppmerchantOutputFixedLength",
						"ppdebitadviceFixedLength select(mapColumn(",
						"          BILLER_MERCHANT_ID = {Biller ID},",
						"          EMAIL_1 = {Biller E-Mail}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ppdebitadviceOutputFixedLength",
						"ODSPP filter(REF3 == 'IFB') ~> filterODSPP",
						"ppmerchantOutputFixedLength filter(BILLER_MERCHANT_ID != '' && ACCOUNT_ID != '' && TAX_ID != '' && NAME_TH != '' && NAME_EN != '' && REF1_TH != '' && REF1_EN != '') ~> filterSequenceKey",
						"ppmerchantDerivedFixedLength filter(BILLER_TYPE == 'TQRC' && BANK_TYPE == 'SCB') ~> filterType",
						"filterSequenceKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MPS_PP_MERCHANTFILE_TEMP.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          BILLER_MERCHANT_ID,",
						"          ACCOUNT_ID,",
						"          TAX_ID,",
						"          NAME_TH,",
						"          NAME_EN,",
						"          COMPANY_NAME_TH,",
						"          COMPANY_NAME_EN,",
						"          ACTIVE_STATUS,",
						"          UPDATE_DATE,",
						"          BUSINESS_TYPE,",
						"          REF1_TH,",
						"          REF1_EN,",
						"          REF2_TH,",
						"          REF2_EN,",
						"          SOURCE,",
						"          REF3",
						"     ),",
						"     partitionBy('hash', 1)) ~> ppmerchantSink",
						"ppdebitadviceOutputFixedLength sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MPS_PP_DEBITADVICE_TEMP.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MPS_PP_MERCHANTFILE_OUTPUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCB_ACTIVITY_LOG_FLOW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Log"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "B2K_EDCTERM",
								"type": "DatasetReference"
							},
							"name": "querySCBACTIVITYLOG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SCB_ACTIVITY_LOG_OUTPUT",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to SCB_ACTIVITY_LOG_OUTPUT"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     schemaName as string ('dbo'),",
						"     tableName as string ('SCB_ACTIVITY_LOG'),",
						"     startDate as string ('2021-12-15 00:00:00.000'),",
						"     endDate as string ('2021-12-16 00:00:00.000'),",
						"     columnName as string ('TRANSACTION_DATE'),",
						"     fileName as string ('temp')",
						"}",
						"source(output(",
						"          ID as integer,",
						"          TRANSACTION_DATE as timestamp,",
						"          FUNCTION_CODE as string,",
						"          LOG as string,",
						"          LOG_TYPE as string,",
						"          APPLICATION_NAME as string,",
						"          EVENT as string,",
						"          EVENT_TYPE as string,",
						"          URL as string,",
						"          MERCHANT_CENTER_ID as string,",
						"          SOURCE_ADDRESS as string,",
						"          SOURCE_HOSTNAME as string,",
						"          SOURCE_USERNAME as string,",
						"          SOURCE_OBJECT as string,",
						"          DESTINATION_ADDRESS as string,",
						"          DESTINATION_HOSTNAME as string,",
						"          DESTINATION_USERNAME as string,",
						"          DESTINATION_OBJECT as string,",
						"          CHANGE_FROM as string,",
						"          CHANGE_TO as string,",
						"          SEARCH_CRITERIA as string,",
						"          RESULT_STATUS as string,",
						"          MESSAGE as string,",
						"          UPDATE_PII_LOG_STATUS as string,",
						"          UPDATE_PII_LOG_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> querySCBACTIVITYLOG",
						"querySCBACTIVITYLOG select(mapColumn(",
						"          TRANSACTION_DATE,",
						"          FUNCTION_CODE,",
						"          LOG,",
						"          LOG_TYPE,",
						"          APPLICATION_NAME,",
						"          EVENT,",
						"          EVENT_TYPE,",
						"          URL,",
						"          MERCHANT_CENTER_ID,",
						"          SOURCE_ADDRESS,",
						"          SOURCE_HOSTNAME,",
						"          SOURCE_USERNAME,",
						"          SOURCE_OBJECT,",
						"          DESTINATION_ADDRESS,",
						"          DESTINATION_HOSTNAME,",
						"          DESTINATION_USERNAME,",
						"          DESTINATION_OBJECT,",
						"          CHANGE_FROM,",
						"          CHANGE_TO,",
						"          SEARCH_CRITERIA,",
						"          RESULT_STATUS,",
						"          MESSAGE,",
						"          UPDATE_PII_LOG_STATUS,",
						"          UPDATE_PII_LOG_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(\"{$fileName}\" + \".log\")],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SCB_ACTIVITY_LOG_OUTPUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K Blob to DB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FixLenghtProcessFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set UPDATE_DATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "B2K_FixLenghtProcessDataFlow",
								"type": "DataFlowReference",
								"parameters": {
									"UPDATE_DATE": {
										"value": "'@{variables('UPDATE_DATE')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"mcrmrchFixedLength": {},
									"edctermFixedLength": {},
									"emsmrmstFixedLength": {},
									"mcrmrchSink": {},
									"edctermSink": {},
									"emsmrmstSink": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AzureIR-ManagedVNet",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "B2K_MCRMRCH to SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FixLenghtProcessFlow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "BILLER_MERCHANT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILLER_MERCHANT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCOUNT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCOUNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TAX_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TAX_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "NAME_TH",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NAME_TH",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "NAME_EN",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NAME_EN",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACTIVE_STATUS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACTIVE_STATUS",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UPDATE_DATE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UPDATE_DATE",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "SOURCE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SOURCE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "B2K_MCRMRCH_TEMP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MerchantProfileTempSQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "B2K_EDCTERM to SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FixLenghtProcessFlow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Terminal_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TERMINAL_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Terminal_Name_TH",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TERMINAL_NAME_TH",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Terminal_Name_EN",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TERMINAL_NAME_EN",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MERCHANT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MERCHANT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UPDATE_DATE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UPDATE_DATE",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "B2K_EDCTERM_TEMP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TerminalProfileTempSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "B2K_EMSMRMST to SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FixLenghtProcessFlow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "BILLER_MERCHANT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILLER_MERCHANT_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EMAIL_1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EMAIL_1",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EMAIL_2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EMAIL_2",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "EMAIL_3",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EMAIL_3",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "B2K_EMSMRMST_TEMP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MerchantEmailTempSQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set UPDATE_DATE",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "UPDATE_DATE",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"UPDATE_DATE": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SMC_B2K"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-15T07:06:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/B2K_FixLenghtProcessDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MERCHANT_ACTIVITY_LOG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set Date Start",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "startDateMerchant",
							"value": {
								"value": "@formatDateTime(subtractFromTime(subtractFromTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),1,'Day'),6,'Month'),'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Date End",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Date Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "endDateMerchant",
							"value": {
								"value": "@formatDateTime(subtractFromTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),6,'Month'),'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set File Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Date End",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameMerchant",
							"value": {
								"value": "@formatDateTime(subtractFromTime(subtractFromTime(utcnow(),1,'Day'),6,'Month'),'dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Merchant Activity Log",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MERCHANT_ACTIVITY_LOG_FLOW",
								"type": "DataFlowReference",
								"parameters": {
									"schemaName": "'dbo'",
									"tableName": "'MERCHANT_ACTIVITY_LOG'",
									"startDate": {
										"value": "'@{variables('startDateMerchant')}'",
										"type": "Expression"
									},
									"endDate": {
										"value": "'@{variables('endDateMerchant')}'",
										"type": "Expression"
									},
									"columnName": "'TRANSACTION_DATE'",
									"fileName": {
										"value": "'@{variables('fileNameMerchant')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"queryMERCHANTACTIVITYLOG": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AzureIR-ManagedVNet",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"startDateMerchant": {
						"type": "String"
					},
					"endDateMerchant": {
						"type": "String"
					},
					"fileNameMerchant": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SMC_AchieveLog"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-16T03:36:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MERCHANT_ACTIVITY_LOG_FLOW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MPS Blob to DB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FixLenghtProcessFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set UPDATE_DATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MPS_FixLenghtProcessDataFlow",
								"type": "DataFlowReference",
								"parameters": {
									"UPDATE_DATE": "toString(currentTimestamp())"
								},
								"datasetParameters": {
									"ppmerchantFixedLength": {},
									"ODSPP": {},
									"ppdebitadviceFixedLength": {},
									"ppmerchantSink": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AzureIR-ManagedVNet",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MPS_PP_MerchantFile to SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FixLenghtProcessFlow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MPS_PP_MERCHANTFILE_TEMP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MerchantProfileTempSQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "MPS_PP_DebitAdvice to SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FixLenghtProcessFlow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MPS_PP_DEBITADVICE_TEMP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MerchantEmailTempSQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set UPDATE_DATE",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "UPDATE_DATE",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"UPDATE_DATE": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SMC_MPS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-13T09:46:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MPS_FixLenghtProcessDataFlow')]",
				"[concat(variables('factoryId'), '/datasets/MPS_PP_MERCHANTFILE_TEMP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCB_ACTIVITY_LOG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Scb Activity Log",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCB_ACTIVITY_LOG_FLOW",
								"type": "DataFlowReference",
								"parameters": {
									"schemaName": "'dbo'",
									"tableName": "'SCB_ACTIVITY_LOG'",
									"startDate": {
										"value": "'@{variables('startDateSCB')}'",
										"type": "Expression"
									},
									"endDate": {
										"value": "'@{variables('endDateSCB')}'",
										"type": "Expression"
									},
									"columnName": "'TRANSACTION_DATE'",
									"fileName": {
										"value": "'@{variables('fileNameSCB')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"querySCBACTIVITYLOG": {},
									"sink1": {
										"year": "utcnow('yyyy')",
										"month": "utcnow('MM')",
										"date": "utcnow('dd')"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "AzureIR-ManagedVNet",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Set Date Start",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "startDateSCB",
							"value": {
								"value": "@formatDateTime(subtractFromTime(subtractFromTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),1,'Day'),1,'Year'),'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Date End",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Date Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "endDateSCB",
							"value": {
								"value": "@formatDateTime(subtractFromTime(convertTimeZone(utcNow(), 'UTC', 'SE Asia Standard Time', 'yyyy-MM-ddTHH:mm:ss'),1,'Year'),'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set File Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Date End",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameSCB",
							"value": {
								"value": "@formatDateTime(subtractFromTime(subtractFromTime(utcnow(),1,'Day'),1,'Year'),'dd')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"startDateSCB": {
						"type": "String"
					},
					"endDateSCB": {
						"type": "String"
					},
					"fileNameSCB": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SMC_AchieveLog"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-16T03:36:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCB_ACTIVITY_LOG_FLOW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerKafKaLog')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Send Log Kafka",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-01-09T12:00:00",
						"timeZone": "SE Asia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Send Log Kafka')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerTaskExpire')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "MasterTaskExpirePipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-02-15T12:39:00",
						"timeZone": "SE Asia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MasterTaskExpirePipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Merchant",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute SCB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MERCHANT_ACTIVITY_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute SCB",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SCB_ACTIVITY_LOG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Email Error 2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set PipelineStep 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pipelineStep": {
									"value": "@variables('pipelineStep')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set PipelineStep 1",
						"description": "Error key message",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute SCB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineStep",
							"value": "ACHIEVELOG_DATA_FAILED"
						}
					},
					{
						"name": "Set PipelineStep 2",
						"description": "Error key message",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Merchant",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineStep",
							"value": "ACHIEVELOG_DATA_FAILED"
						}
					},
					{
						"name": "Send Email Error 1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set PipelineStep 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pipelineStep": {
									"value": "@variables('pipelineStep')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"pipelineStep": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SMC_AchieveLog"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MERCHANT_ACTIVITY_LOG')]",
				"[concat(variables('factoryId'), '/pipelines/SCB_ACTIVITY_LOG')]"
			]
		}
	]
}