{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Merchant-Portal-Adf"
		},
		"B2Kblob_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://merchantportalblob.blob.core.windows.net/"
		},
		"SmcFtpB2k_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "benseni.se.scb.co.th"
		},
		"SmcFtpB2k_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "smcadfusr"
		},
		"SmcFtpMps_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "GreenOak.se.scb.co.th"
		},
		"SmcFtpMps_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "se\\SMCUsrSit"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/TerminalProfileB2KTempSql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TERMINAL_ID",
						"type": "varchar"
					},
					{
						"name": "TERMINAL_NAME_TH",
						"type": "varchar"
					},
					{
						"name": "TERMINAL_NAME_EN",
						"type": "varchar"
					},
					{
						"name": "MERCHANT_ID",
						"type": "varchar"
					},
					{
						"name": "ACTIVE_STATUS",
						"type": "varchar"
					},
					{
						"name": "UPDATE_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TERMINAL_PROFILE_B2K_TEMP"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2Kblob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('B2Kblob_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2",
					"credential": {
						"referenceName": "AzureManageIdentity",
						"type": "CredentialReference"
					}
				},
				"connectVia": {
					"referenceName": "AzureIR-ManagedVNet",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SmcFtpB2k')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('SmcFtpB2k_properties_typeProperties_host')]",
					"port": "991",
					"enableSsl": true,
					"enableServerCertificateValidation": false,
					"authenticationType": "Basic",
					"userName": "[parameters('SmcFtpB2k_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultADF",
							"type": "LinkedServiceReference"
						},
						"secretName": "smc-b2k-sftp-password"
					}
				},
				"connectVia": {
					"referenceName": "shir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SmcFtpMps')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FtpServer",
				"typeProperties": {
					"host": "[parameters('SmcFtpMps_properties_typeProperties_host')]",
					"port": "991",
					"enableSsl": true,
					"enableServerCertificateValidation": false,
					"authenticationType": "Basic",
					"userName": "[parameters('SmcFtpMps_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultADF",
							"type": "LinkedServiceReference"
						},
						"secretName": "smc-msp-sftp-password"
					}
				},
				"connectVia": {
					"referenceName": "shir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Purge Activity Log')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "purgeSCBActivityLog",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Date End",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[purgeSCBActivityLog]",
								"storedProcedureParameters": {
									"END_DATE": {
										"type": "String",
										"value": {
											"value": "@variables('END_DATE')",
											"type": "Expression"
										}
									},
									"START_DATE": {
										"type": "String",
										"value": {
											"value": "@variables('START_DATE')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCB_ACTIVITY_LOG",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set resultSCB",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "purgeSCBActivityLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "resultSCB",
							"value": {
								"value": "@if(equals(activity('purgeSCBActivityLog').output.firstRow.CODE, '200'), true, false)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set resultSCB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('resultSCB')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Return Result SCB",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pipelineReturnValue",
										"value": [
											{
												"key": "result",
												"value": {
													"type": "Expression",
													"content": "@activity('purgeSCBActivityLog').output.firstRow"
												}
											}
										],
										"setSystemVariable": true
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "purgeMerchantActivityLog",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set Date End 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[purgeMerchantActivityLog]",
											"storedProcedureParameters": {
												"END_DATE": {
													"type": "String",
													"value": {
														"value": "@variables('END_DATE')",
														"type": "Expression"
													}
												},
												"START_DATE": {
													"type": "String",
													"value": {
														"value": "@variables('START_DATE')",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "MERCHANT_ACTIVITY_LOG",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Return Result Merchant",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "purgeMerchantActivityLog",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pipelineReturnValue",
										"value": [
											{
												"key": "result",
												"value": {
													"type": "Expression",
													"content": "@activity('purgeMerchantActivityLog').output.firstRow"
												}
											}
										],
										"setSystemVariable": true
									}
								},
								{
									"name": "Set Date Start 2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "START_DATE",
										"value": {
											"value": "@formatDateTime(subtractFromTime(pipeline().parameters.jobDate,180,'Day'),'yyyy-MM-dd 00:00:00.000')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Date End 2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Date Start 2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "END_DATE",
										"value": {
											"value": "@formatDateTime(subtractFromTime(pipeline().parameters.jobDate,180,'Day'),'yyyy-MM-dd 23:59:59.999')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set Date Start",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "START_DATE",
							"value": {
								"value": "@formatDateTime(subtractFromTime(pipeline().parameters.jobDate,365,'Day'),'yyyy-MM-dd 00:00:00.000')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Date End",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Date Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "END_DATE",
							"value": {
								"value": "@formatDateTime(subtractFromTime(pipeline().parameters.jobDate,365,'Day'),'yyyy-MM-dd 23:59:59.999')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"jobDate": {
						"type": "string"
					}
				},
				"variables": {
					"resultSCB": {
						"type": "Boolean"
					},
					"resultMerchant": {
						"type": "Boolean"
					},
					"START_DATE": {
						"type": "String"
					},
					"END_DATE": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SMC_Store_Procedure"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Send Email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Email Error",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Sig Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(\n    variables('hostUrl'),\n    variables('serviceUrl'),\n\t'?api-version=',\n\tvariables('api-version'),\n\t'&sp=',\n\tvariables('sp'),\n\t'&sv=',\n\tvariables('sv'),\n\t'&sig=',\n\tvariables('sig')\n)",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "shir",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@concat(\n\t'{\"to\": \"',\n\tactivity('Get Email Body').output.firstRow.EMAIL_TO,\n\t'\",\"subject\": \"',\n\tvariables('subjectEmail'),\n\t'\",\"html\": \"',\n\tvariables('errorMessage'),\n\t'\",\"mstUrl\": \"',\n\tvariables('mstUrl'),\n\tpipeline().parameters.pipelineMstKey,\n\tvariables('mstUrlKey'),\n\t'\",\"pipelineError\": \"',\n\tvariables('errorMessage'),\n\t'\",\"errorFolderName\":\"',\n\tvariables('errorFolderName'),\n\t'\",\"errorFileName\":\"',\n\tvariables('errorFileName'),\n\t'\",\"isSendMST\": true',\n\t'}'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Email Body",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Subject Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n\t'SELECT TOP 1 EMAIL_EVENT, EMAIL_SUBJECT, EMAIL_BODY, ACTIVE_STATUS, EMAIL_TO FROM EMAIL_TEMPLATE WHERE ACTIVE_STATUS = ''A'' AND EMAIL_EVENT = ''',\n\tpipeline().parameters.pipelineStep,\n\t''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EmailBodySql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Error Message",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "errorMessage",
							"value": {
								"value": "@concat(\n\t'<html><body>',\n\t'Mail message from ADF',\n\t'<br><br>Resource Group : ',\n\tvariables('ResourceGroup'),\n\t'<br>Service Name : ',\n\tvariables('ResourceService'),\n\t'<br>Fail Pipeline : ',\n\tpipeline().parameters.pipelineName,\n\t'<br>Date : ',\n\tpipeline().parameters.pipelineSubjectDate,\n\t'<br>Rerun Pipeline : ',\n\tpipeline().parameters.pipelineNameRerun,\n\t'<br><br>Error : <br>',\n\treplace(pipeline().parameters.pipelineError, '\"', '\\\"'),\n\t'</html></body>'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Error File Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Error Folder Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "errorFileName",
							"value": {
								"value": "@concat(\n    'error_log.txt'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Error Folder Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Error Message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "errorFolderName",
							"value": {
								"value": "@concat(\n    '/log/error_pipeline_log/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n    '/',\n    pipeline().parameters.pipelineName\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Subject Email",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Error File Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "subjectEmail",
							"value": {
								"value": "@concat(\n\t'ADF Fail : ',\n\tvariables('ResourceGroup'),\n\t'/',\n\tvariables('ResourceService'),\n\t'/',\n\tpipeline().parameters.pipelineNameRerun,\n\t' ** ',\n\tpipeline().parameters.pipelineSubjectDate,\n\t' **'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Sig Value",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Email Body",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(\n    variables('keyvault_host'),\n    '/',\n    variables('keyvault_sig_key'),\n    variables('keyvault_sig_version')\n)",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "shir",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"resource": "https://vault.azure.net",
								"credential": {
									"referenceName": "AzureManageIdentity",
									"type": "CredentialReference"
								},
								"type": "UserAssignedManagedIdentity"
							}
						}
					},
					{
						"name": "Set Sig Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Sig Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "sig",
							"value": {
								"value": "@activity('Get Sig Value').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pipelineStep": {
						"type": "string",
						"defaultValue": "Email Body"
					},
					"pipelineMstKey": {
						"type": "string",
						"defaultValue": "MicrosoftTeamKey"
					},
					"pipelineName": {
						"type": "string",
						"defaultValue": "Pipeline Name"
					},
					"pipelineError": {
						"type": "string",
						"defaultValue": "pipelineError"
					},
					"pipelineSubjectDate": {
						"type": "string",
						"defaultValue": "pipelineSubjectDate"
					},
					"pipelineNameRerun": {
						"type": "string",
						"defaultValue": "pipelineNameRerun"
					}
				},
				"variables": {
					"hostUrl": {
						"type": "String",
						"defaultValue": "https://scbsmcsealga001streamit.azurewebsites.net:443"
					},
					"serviceUrl": {
						"type": "String",
						"defaultValue": "/api/office365/triggers/manual/invoke"
					},
					"api-version": {
						"type": "String",
						"defaultValue": "2022-05-01"
					},
					"sp": {
						"type": "String",
						"defaultValue": "/triggers/manual/run"
					},
					"sv": {
						"type": "String",
						"defaultValue": "1.0"
					},
					"sig": {
						"type": "String",
						"defaultValue": "N-ealrdpLyKhGotw_QyE8IajIu-ZwNbjQCi6nsOytIc"
					},
					"mstUrl": {
						"type": "String",
						"defaultValue": "https://scbcorp.webhook.office.com/webhookb2/6c31876e-5491-4377-8b01-5e565074bbe5@45202dee-4088-4e8c-8ebd-c01f56740e8f/IncomingWebhook/"
					},
					"mstUrlKey": {
						"type": "String",
						"defaultValue": "/21f0e5ae-977c-4a51-8fcf-d16ea01f2450"
					},
					"ResourceGroup": {
						"type": "String",
						"defaultValue": "HFY-Merchant-Portal"
					},
					"ResourceService": {
						"type": "String",
						"defaultValue": "Merchant-Portal-Adf"
					},
					"errorMessage": {
						"type": "String"
					},
					"errorFileName": {
						"type": "String"
					},
					"errorFolderName": {
						"type": "String"
					},
					"subjectEmail": {
						"type": "String"
					},
					"keyvault_host": {
						"type": "String",
						"defaultValue": "https://hfy-smc.vault.azure.net/secrets/"
					},
					"keyvault_sig_key": {
						"type": "String",
						"defaultValue": "smc-azure-lga-sig"
					},
					"keyvault_sig_version": {
						"type": "String",
						"defaultValue": "?api-version=7.0"
					}
				},
				"folder": {
					"name": "SMC_Send_Error_Email"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-13T09:46:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update All Task Expire')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "updateAllTaskExpire",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[updateAllTaskExpired]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ImportMerchantProfileSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Return Result",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "updateAllTaskExpire",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "result",
									"value": {
										"type": "Expression",
										"content": "@activity('updateAllTaskExpire').output.firstRow"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SMC_Store_Procedure"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update Merchant Profile B2K')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "updateMerchantProfileB2K",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[updateMerchantProfileB2K]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ImportMerchantProfileSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Return Result",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "updateMerchantProfileB2K",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "result",
									"value": {
										"type": "Expression",
										"content": "@activity('updateMerchantProfileB2K').output.firstRow"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SMC_Store_Procedure"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update Merchant Profile MPS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "updateMerchantProfileMPS",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[updateMerchantProfileMPS]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ImportMerchantProfileSql",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Return Result",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "updateMerchantProfileMPS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "result",
									"value": {
										"type": "Expression",
										"content": "@activity('updateMerchantProfileMPS').output.firstRow"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SMC_Store_Procedure"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_EDCTERM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/EDCTERM"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(\n    'B2K_EDCTERM_',\n    formatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'yyyyMMdd'),\n    '.txt'\n)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd')\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"encodingName": "WINDOWS-874",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_EDCTERM_DATA_ERROR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/EDCTERM"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(\n    'B2K_EDCTERM_DATA_ERROR_',\n    formatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'yyyyMMdd'),\n    '.csv'\n)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n    '/error_log'\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"encodingName": "WINDOWS-874",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_EDCTERM_FILTER_ERROR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/EDCTERM"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(\n    'B2K_EDCTERM_FILTER_ERROR_',\n    formatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'yyyyMMdd'),\n    '.txt'\n)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n    '/error_log'\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"encodingName": "WINDOWS-874",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_EDCTERM_OUTPUT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/EDCTERM"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "B2K_EDCTERM_TEMP.txt",
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n\t'/output'\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_EDCTERM_TEMP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/EDCTERM"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "B2K_EDCTERM_TEMP.txt",
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n\t'/output'\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MERCHANT_ID",
						"type": "String"
					},
					{
						"name": "Terminal_ID",
						"type": "String"
					},
					{
						"name": "Terminal_Name_EN",
						"type": "String"
					},
					{
						"name": "Terminal_Name_TH",
						"type": "String"
					},
					{
						"name": "UPDATE_DATE",
						"type": "String"
					},
					{
						"name": "ACTIVE_STATUS",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_EMSMRMST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/EMSMRMST"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(\n    'B2K_EMSMRMST_',\n    formatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'yyyyMMdd'),\n    '.txt'\n)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd')\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"encodingName": "WINDOWS-874",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_EMSMRMST_DATA_ERROR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/EMSMRMST"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(\n    'B2K_EMSMRMST_DATA_ERROR_',\n    formatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'yyyyMMdd'),\n    '.csv'\n)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n    '/error_log'\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"encodingName": "WINDOWS-874",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_EMSMRMST_OUTPUT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/EMSMRMST"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "B2K_EMSMRMST_TEMP.txt",
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n\t'/output'\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_EMSMRMST_TEMP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/EMSMRMST"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "B2K_EMSMRMST_TEMP.txt",
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd'),\n\t'/output'\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_IMPORT_MERCHANT_PROFILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/SMC_IMPORT_MERCHANT_PROFILE"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "B2K_IMPORT_MERCHANT_PROFILE.txt",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd')\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "|",
					"encodingName": "WINDOWS-874",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/B2K_MCRMRCH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "B2Kblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "B2KMPS/B2K/MCRMRCH"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(\n    'B2K_MCRMRCH_',\n    formatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'yyyyMMdd'),\n    '.txt'\n)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(\n    'b2k/',\n    getFutureTime(7, 'Hour', 'yyyy'),\n    '/',\n    getFutureTime(7, 'Hour', 'MM'),\n    '/',\n\tformatDateTime(subtractFromTime(getFutureTime(7, 'Hour', 'yyyy-MM-dd HH:mm:ss'),1,'Day'),'dd')\n)",
							"type": "Expression"
						},
						"container": "file-upload"
					},
					"columnDelimiter": "\u0001",
					"encodingName": "WINDOWS-874",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/B2Kblob')]"
			]
		}
	]
}