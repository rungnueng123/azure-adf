{
	"name": "B2K_FixLenghtProcessDataFlow",
	"properties": {
		"folder": {
			"name": "B2KMPS"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "B2K_MCRMRCH_OUTPUT_TEMP",
						"type": "DatasetReference"
					},
					"name": "mcrmrchFixedLength"
				},
				{
					"dataset": {
						"referenceName": "B2K_EDCTERM",
						"type": "DatasetReference"
					},
					"name": "edctermFixedLength"
				},
				{
					"dataset": {
						"referenceName": "B2K_EMSMRMST",
						"type": "DatasetReference"
					},
					"name": "emsmrmstFixedLength"
				},
				{
					"dataset": {
						"referenceName": "B2K_IMPORT_MERCHANT_PROFILE",
						"type": "DatasetReference"
					},
					"name": "importMerchantProfile"
				},
				{
					"dataset": {
						"referenceName": "B2K_MCRMRCH_DATA_ERROR_TEMP",
						"type": "DatasetReference"
					},
					"name": "mcrmrchError",
					"description": "Import data from B2K_MCRMRCH_DATA_ERROR_TEMP"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "B2K_MCRMRCH_OUTPUT",
						"type": "DatasetReference"
					},
					"name": "mcrmrchSink"
				},
				{
					"dataset": {
						"referenceName": "B2K_EDCTERM_OUTPUT",
						"type": "DatasetReference"
					},
					"name": "edctermSink"
				},
				{
					"dataset": {
						"referenceName": "B2K_EMSMRMST_OUTPUT",
						"type": "DatasetReference"
					},
					"name": "emsmrmstSink"
				},
				{
					"dataset": {
						"referenceName": "B2K_MCRMRCH_FILTER_ERROR",
						"type": "DatasetReference"
					},
					"name": "mcrmrchFilterFailSink"
				},
				{
					"dataset": {
						"referenceName": "B2K_EDCTERM_DATA_ERROR",
						"type": "DatasetReference"
					},
					"name": "edctermFailSink"
				},
				{
					"dataset": {
						"referenceName": "B2K_EMSMRMST_DATA_ERROR",
						"type": "DatasetReference"
					},
					"name": "emsmrmstFailSink"
				},
				{
					"dataset": {
						"referenceName": "B2K_EDCTERM_FILTER_ERROR",
						"type": "DatasetReference"
					},
					"name": "edctermFilterFailSink"
				}
			],
			"transformations": [
				{
					"name": "edctermDerivedFixedLength"
				},
				{
					"name": "edctermOutputFixedLength"
				},
				{
					"name": "emsmrmstColumn1"
				},
				{
					"name": "emsmrmstOutputFixedLength"
				},
				{
					"name": "filterSequenceKey"
				},
				{
					"name": "filterSequence"
				},
				{
					"name": "mcrmrchFilterCheck"
				},
				{
					"name": "edctermDataCheck"
				},
				{
					"name": "emsmrmstDataCheck"
				},
				{
					"name": "edctermFilterCheck"
				},
				{
					"name": "joinImpMercProf1"
				},
				{
					"name": "joinImpMercProf2"
				},
				{
					"name": "joinImpMercProf3"
				},
				{
					"name": "mcrmrchErrorDerived"
				},
				{
					"name": "mcrmrchErrorAggregate"
				},
				{
					"name": "mcrmrchErrorFlatten"
				}
			],
			"scriptLines": [
				"parameters{",
				"     UPDATE_DATE as string (toString(currentTimestamp())),",
				"     FileErrorDate as string ('')",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> mcrmrchFixedLength",
				"source(output(",
				"          data as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> edctermFixedLength",
				"source(output(",
				"          data as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> emsmrmstFixedLength",
				"source(output(",
				"          MID_L11 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> importMerchantProfile",
				"source(output(",
				"          data as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> mcrmrchError",
				"edctermDataCheck@edctermDataPass derive(MERCHANT_ID = trim(substring(data, 11, 16)),",
				"          Terminal_ID = trim(substring(data, 1, 8)),",
				"          Terminal_Name_EN = trim(substring(data, 30, 30)),",
				"          Terminal_Name_TH = trim(substring(data, 30, 30)),",
				"          UPDATE_DATE = $UPDATE_DATE,",
				"          ACTIVE_STATUS = 'A',",
				"          MID_L11 = trim(substring(data, 11, 11))) ~> edctermDerivedFixedLength",
				"edctermDerivedFixedLength select(mapColumn(",
				"          data,",
				"          MERCHANT_ID,",
				"          Terminal_ID,",
				"          Terminal_Name_EN,",
				"          Terminal_Name_TH,",
				"          UPDATE_DATE,",
				"          ACTIVE_STATUS,",
				"          MID_L11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> edctermOutputFixedLength",
				"emsmrmstDataCheck@emsmrmstDataPass derive(BILLER_MERCHANT_ID = trim(substring(data, 3, 16)),",
				"          EMAIL_1 = trim(substring(data, 24, 70)),",
				"          EMAIL_2 = trim(substring(data, 94, 70)),",
				"          EMAIL_3 = trim(substring(data, 164, 70)),",
				"          MID_L11 = trim(substring(data, 3, 11))) ~> emsmrmstColumn1",
				"emsmrmstColumn1 select(mapColumn(",
				"          data,",
				"          BILLER_MERCHANT_ID,",
				"          EMAIL_1,",
				"          EMAIL_2,",
				"          EMAIL_3,",
				"          MID_L11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> emsmrmstOutputFixedLength",
				"mcrmrchFilterCheck@mcrmrchFilterPass filter(BILLER_MERCHANT_ID != '' && ACCOUNT_ID != '' && TAX_ID != '' && NAME_TH != '' && NAME_EN != '') ~> filterSequenceKey",
				"edctermFilterCheck@edctermFilterPass filter(MERCHANT_ID != '' && Terminal_ID != '' && Terminal_Name_EN != '' && Terminal_Name_TH != '') ~> filterSequence",
				"mcrmrchFixedLength split(length(BILLER_MERCHANT_ID) > 0 && length(ACCOUNT_ID) > 0 && length(TAX_ID) > 0 && length(NAME_TH) > 0 && length(NAME_EN) > 0,",
				"     disjoint: false) ~> mcrmrchFilterCheck@(mcrmrchFilterPass, mcrmrchFilterFail)",
				"edctermFixedLength split(length(data) == 450,",
				"     disjoint: false) ~> edctermDataCheck@(edctermDataPass, edctermDataFail)",
				"emsmrmstFixedLength split(length(data) >= 234,",
				"     disjoint: false) ~> emsmrmstDataCheck@(emsmrmstDataPass, emsmrmstDatafail)",
				"edctermOutputFixedLength split(length(MERCHANT_ID) > 0 && length(Terminal_ID) > 0 && length(Terminal_Name_EN) > 0 && length(Terminal_Name_TH) > 0,",
				"     disjoint: false) ~> edctermFilterCheck@(edctermFilterPass, edctermFilterFail)",
				"filterSequenceKey, importMerchantProfile join(mcrmrchFilterCheck@mcrmrchFilterPass@MID_L11 == importMerchantProfile@MID_L11,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinImpMercProf1",
				"filterSequence, importMerchantProfile join(edctermFilterCheck@edctermFilterPass@MID_L11 == importMerchantProfile@MID_L11,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinImpMercProf2",
				"emsmrmstOutputFixedLength, importMerchantProfile join(emsmrmstOutputFixedLength@MID_L11 == importMerchantProfile@MID_L11,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinImpMercProf3",
				"mcrmrchError derive(Key = toLong(1),",
				"          data = split(data, ',')) ~> mcrmrchErrorDerived",
				"mcrmrchErrorDerived aggregate(groupBy(Key),",
				"     data = topN(data,Key,1)) ~> mcrmrchErrorAggregate",
				"mcrmrchErrorAggregate foldDown(unroll(data.value),",
				"     mapColumn(",
				"          Key,",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> mcrmrchErrorFlatten",
				"joinImpMercProf1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['B2K_MCRMRCH_TEMP.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BILLER_MERCHANT_ID,",
				"          ACCOUNT_ID,",
				"          TAX_ID,",
				"          NAME_TH,",
				"          NAME_EN,",
				"          ACTIVE_STATUS,",
				"          UPDATE_DATE,",
				"          SOURCE",
				"     ),",
				"     partitionBy('hash', 1)) ~> mcrmrchSink",
				"joinImpMercProf2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['B2K_EDCTERM_TEMP.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          MERCHANT_ID,",
				"          Terminal_ID,",
				"          Terminal_Name_EN,",
				"          Terminal_Name_TH,",
				"          UPDATE_DATE,",
				"          ACTIVE_STATUS",
				"     ),",
				"     partitionBy('hash', 1)) ~> edctermSink",
				"joinImpMercProf3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['B2K_EMSMRMST_TEMP.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BILLER_MERCHANT_ID,",
				"          EMAIL_1,",
				"          EMAIL_2,",
				"          EMAIL_3",
				"     ),",
				"     partitionBy('hash', 1)) ~> emsmrmstSink",
				"mcrmrchFilterCheck@mcrmrchFilterFail sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat(\r",
				"    'B2K_MCRMRCH_FILTER_ERROR_',\r",
				"    $FileErrorDate,\r",
				"    '.csv'\r",
				"))],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          BILLER_MERCHANT_ID,",
				"          ACCOUNT_ID,",
				"          TAX_ID,",
				"          NAME_TH,",
				"          NAME_EN,",
				"          ACTIVE_STATUS,",
				"          UPDATE_DATE,",
				"          SOURCE",
				"     ),",
				"     partitionBy('hash', 1)) ~> mcrmrchFilterFailSink",
				"edctermDataCheck@edctermDataFail sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat(\r",
				"    'B2K_EDCTERM_DATA_ERROR_',\r",
				"    $FileErrorDate,\r",
				"    '.txt'\r",
				"))],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> edctermFailSink",
				"emsmrmstDataCheck@emsmrmstDatafail sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat(\r",
				"    'B2K_EMSMRMST_DATA_ERROR_',\r",
				"    $FileErrorDate,\r",
				"    '.txt'\r",
				"))],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> emsmrmstFailSink",
				"edctermFilterCheck@edctermFilterFail sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat(\r",
				"    'B2K_EDCTERM_FILTER_ERROR_',\r",
				"    $FileErrorDate,\r",
				"    '.csv'\r",
				"))],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          MERCHANT_ID,",
				"          Terminal_ID,",
				"          Terminal_Name_EN,",
				"          Terminal_Name_TH,",
				"          UPDATE_DATE,",
				"          ACTIVE_STATUS",
				"     ),",
				"     partitionBy('hash', 1)) ~> edctermFilterFailSink"
			]
		}
	}
}